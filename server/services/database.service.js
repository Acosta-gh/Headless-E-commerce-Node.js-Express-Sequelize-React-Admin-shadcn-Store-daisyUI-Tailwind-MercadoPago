const { sequelize, Usuario } = require('../models'); // Importa sequelize y modelos necesarios
const bcrypt = require('bcrypt');

/**
 * Crea el usuario administrador a partir de las variables de entorno si no existe.
 * Esta es una operaci√≥n de "seeding" (siembra de datos).
 */
async function seedAdminUser() {
  const adminEmail = process.env.ADMIN_EMAIL;
  const adminPassword = process.env.ADMIN_PASSWORD;

   console.log(`[SEEDER] Creando admin con password: '${adminPassword}'`);

  // Verifica que las variables de entorno est√©n definidas
  if (!adminEmail || !adminPassword) {
    console.warn("‚ö†Ô∏è  No se crear√° usuario admin. Faltan variables de entorno ADMIN_EMAIL o ADMIN_PASSWORD.");
    return;
  }

  try {
    // Verificar si el usuario admin ya existe
    const existingAdmin = await Usuario.findOne({ where: { email: adminEmail } });
    if (existingAdmin) {
      console.log(`‚ÑπÔ∏è  Usuario administrador ya existe: ${adminEmail}`);
      return;
    }
  
    // Crear el usuario administrador
    await Usuario.create({
      nombre: "Administrador",
      email: adminEmail,
      password: adminPassword, // Se hashear√° autom√°ticamente por el hook antes de guardar
      admin: true,
      repartidor: false,
      verificado: true,
    });
    console.log(`‚úÖ Usuario administrador creado con √©xito: ${adminEmail}`);

  } catch (error) {
    console.error("‚ùå Error cr√≠tico al intentar crear el usuario administrador:", error);
    // En un caso real, podr√≠as querer detener el arranque si el admin es esencial
    throw error;
  }
}

/**
 * Conecta y sincroniza la base de datos usando Sequelize.
 * @returns {Promise<object>} La instancia de sequelize conectada.
 */
async function connectToDatabase() {
  try {
    // sync() tambi√©n conecta. Authenticate es una buena verificaci√≥n expl√≠cita.
    await sequelize.authenticate();
    console.log("‚úÖ Conexi√≥n a la base de datos establecida con √©xito.");

    // Sincroniza los modelos. Ideal para desarrollo.
    // Para producci√≥n, considera usar migraciones.
    await sequelize.sync({ force: false });
    console.log("üîÑ Modelos de Sequelize sincronizados.");

    // Una vez conectado, ejecuta la siembra de datos.
    await seedAdminUser();

    return sequelize; // Devuelve la instancia para poder cerrarla despu√©s

  } catch (error) {
    console.error("‚ùå No se pudo conectar a la base de datos:", error);
    // Relanza el error para que el `startServer` en server.js lo atrape y detenga el proceso.
    throw error;
  }
}

module.exports = { connectToDatabase };